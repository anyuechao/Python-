#!/usr/bin/env python
#coding=gbk

"""1.字符编码介绍
    
    
    我们已经讲过了，字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。
    
    因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295。
    
    由于计算机是美国人发明的，因此，最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。
    
    但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。
    
    你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。
    
    """
'''1.1Unicode编码
    因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。
    
    Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。
    
    '''
'''1.2ASCII编码和Unicode编码的区别
    (1).ASCII编码是1个字节，而Unicode编码通常是2个字节。
    (2).字母A用ASCII编码是十进制的65，二进制的01000001；
    (3).字符o用ASCII编码是十进制的48，二进制的00110000，注意字符'o'和整数0是不同的；
    
    (4).汉字中已经超出了ASCII编码的范围，用Unicode编码是十进制的20013，二进制的01001110 00101101。
    
    '''
'''1.3utf-8编码
    你可以猜测，如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。
    新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。
    所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：
    
    '''

'''1.4Python的字符串 ASCII Unicode utf-8的相互转换
    因为Python的诞生比Unicode标准发布的时间还要早，所以最早的Python只支持ASCII编码，普通的字符串'ABC'在Python内部都是ASCII编码的。Python提供了ord()和chr()函数，可以把字母和对应的数字相互转换：
    '''

print ('A转换ASCII编码:{}'.format(ord('A')))
print ('65转换字符编码:{}'.format(chr(65)))
'''
    Python在后来添加了对Unicode的支持，以Unicode表示的字符串用u'...'表示，比如：
    '''

print u'中文'
u'中文'
'''
    写u'中'和u'\u4e2d'是一样的，\u后面是十六进制的Unicode码。因此，u'A'和u'\u0041'也是一样的。
    
    两种字符串如何相互转换？字符串'xxx'虽然是ASCII编码，但也可以看成是UTF-8编码，而u'xxx'则只能是Unicode编码。
    
    把u'xxx'转换为UTF-8编码的'xxx'用encode('utf-8')方法：
 
    '''
u'ABC'.encode('utf-8')
u'中文'.encode('utf-8')
'''1.5小结
    (1).Python最早只支持ASCII,由于Unicode编码的出现,再后来又添加了对Unicode的支持
    逆ASCII编码:大小写英文字母、数字和一些符号
    
    (2) 逆ASCII编码() => ASCII编码:  ord('A')
    (3) ASCII编码   => 逆ASCII编码:  chr(65)
    (3).           => Unicode:      u'中文'
    (4).Unicode => utf-8:           u'中文'.encode('utf-8')
    注意:英文字符转换后表示的UTF-8的值和Unicode值相等（但占用的存储空间不同），而中文字符转换后1个Unicode字符将变为3个UTF-8字符，你看到的\xe4就是其中一个字节，因为它的值是228，没有对应的字母可以显示，所以以十六进制显示字节的数值。
    
    '''
'''1.6字符串长度
    len()函数可以返回字符串的长度：
    '''
len(u'ABC') #3 ASCII
len('ABC')#3 ASCII
len(u'中文')#2 utf-8
len('\xe4\xb8\xad\xe6\x96\x87')#6 Unicode
len('中文')#6 Unicode

'''1.7 UTF-8 => Unicode转换
    反过来，把UTF-8编码表示的字符串'xxx'转换为Unicode字符串u'xxx'用decode('utf-8')方法：
    '''
'abc'.decode('utf-8')

'''1.8添加头代码
    由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
    
    第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；
    #!/usr/bin/env python
    
    第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。
    # -*- coding: utf-8 -*-
    
    注意:如果你使用Notepad++进行编辑，除了要加上# -*- coding: utf-8 -*-外，中文字符串必须是Unicode字符串：
    
    '''

'''1.9格式化输出
    在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：
    %d	整数
    %f	浮点数
    %s	字符串
    %x	十六进制整数
    '''
print ('Hello.%s' % 'world')
'Hello.%s' % 'world'
'''
    其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：
    '''
'%2d-%02d' %(3,1)
'%.2f' % 3.1415926
'''
    如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
    对于Unicode字符串，用法完全一样，但最好确保替换的字符串也是Unicode字符串：
    '''
u'Hi,%s' % u'Michael'
'%s %s' % (25,True)

'''
    用%%来表示一个%：
    '''

'Earth\'s water accounts for only %s %% of the total water in Shanghai' % 7


